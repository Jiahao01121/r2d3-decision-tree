import React from 'react';

const ClassifierResults = ({ width }) =>
    <g className="classifier-results">
        <text x="300" font-size="9" text-anchor="middle">Training Accuracy</text>
        <rect width={width} height="1" fill="#aaaaaa" />
    </g>;

const ClassifierSide = ({ correct, total }) =>
    ;

const ClassifierFraction = ({ correct, total }) =>
    <g>
        <text font-size="22" fill="blue" text-anchor="end"  >{correct}</text>
        <text font-size="22" text-anchor="middle">/</text>
        <text font-size="22" fill="blue" text-anchor="start">{total}</text>
    </g>;

export default ClassifierResults;

var ClassifierResultsView = Backbone.View.extend({
    initialize: function(args) {
        _.extend(this, args);

        this.scroll = 0;

        this.largeTextSize = 26;
        this.smallTextSize = 22;
        this.labelVerticalOffset = - this.largeTextSize - 10;


        this.testLabel = this.testGroup.append('text')
                             .text(testAccuracyText(LANG))
                             .attr('text-anchor', 'middle')
                             .attr('font-size', 9)
                             .attr('y', this.labelVerticalOffset)
                             .attr('x', 300);

        this.testOpacity = 0;
        this.opacityInterpolator = d3.scale.linear()
                                     .domain([100000, 100100])
                                     .range([0, 1])
                                     .clamp(true);
        var verticalOffset = -8;

        // Training Set Text
        this.textNodes.train.accuracy
            .text('0')
            .attr('text-anchor', 'middle')
            .attr('y', verticalOffset)
            .attr('font-size', 26)
            .attr('fill', "#333333");

        this.trainingTargetDivider = this.trainingGroup.append('text')
                                         .text('/')
                                         .attr('text-anchor', 'middle')
                                         .attr('y', verticalOffset)
                                         .attr('font-size', 22)

        this.trainingNotTargetDivider = this.trainingGroup.append('text')
                                            .text('/')
                                            .attr('text-anchor', 'middle')
                                            .attr('y', verticalOffset)
                                            .attr('font-size', 22)

        this.textNodes.train.isTarget.correct
                                            .text('0')
                                            .attr('text-anchor', 'end')
                                            .attr('fill', FILL_FN(true))
                                            .attr('y', verticalOffset)
                                            .attr('font-size', 22)

        this.textNodes.train.isTarget.total
                                            .text('0')
                                            .attr('text-anchor', 'start')
                                            .attr('fill', FILL_FN(true))
                                            .attr('y', verticalOffset)
                                            .attr('font-size', 22)

        this.textNodes.train.isNotTarget.correct
                                            .text('0')
                                            .attr('text-anchor', 'end')
                                            .attr('fill', FILL_FN(false))
                                            .attr('y', verticalOffset)
                                            .attr('font-size', 22)

        this.textNodes.train.isNotTarget.total
                                            .text('0')
                                            .attr('text-anchor', 'start')
                                            .attr('fill', FILL_FN(false))
                                            .attr('y', verticalOffset)
                                            .attr('font-size', 22)

        this.largeTextNodes.push(this.textNodes.train.accuracy);
        this.smallTextNodes.push(this.trainingTargetDivider);
        this.smallTextNodes.push(this.trainingNotTargetDivider);
        this.smallTextNodes.push(this.textNodes.train.isTarget.correct);
        this.smallTextNodes.push(this.textNodes.train.isTarget.total);
        this.smallTextNodes.push(this.textNodes.train.isNotTarget.correct);
        this.smallTextNodes.push(this.textNodes.train.isNotTarget.total);

        // Test Set Text
        this.textNodes.test.accuracy
            .text('0')
            .attr('text-anchor', 'middle')
            .attr('y', verticalOffset)
            .attr('font-size', 26)
            .attr('fill', "#333333");

        this.testTargetDivider = this.testGroup.append('text')
                                     .text('/')
                                     .attr('text-anchor', 'middle')
                                     .attr('y', verticalOffset)
                                     .attr('font-size', 22);

        this.testNotTargetDivider = this.testGroup.append('text')
                                        .text('/')
                                        .attr('text-anchor', 'middle')
                                        .attr('y', verticalOffset)
                                        .attr('font-size', 22);
    },
    handleResize: function(args) {
        _.extend(this, args);

        var leftAnchor = this.width * 0.37;
        var rightAnchor = this.width * 0.63;

        // Training Set
        this.trainingGroup
            .attr('transform', 'translate(0, ' + this.baseline.training + ')');

        this.trainingLine
            .attr('width', this.width)

        this.trainingLabel
            .attr('x', this.width / 2);

        this.textNodes.train.accuracy
            .attr('x', this.width / 2);

        this.trainingTargetDivider
            .attr('x', rightAnchor)

        this.textNodes.train.isTarget.correct
            .attr('x', rightAnchor - 5);

        this.textNodes.train.isTarget.total
            .attr('x', rightAnchor + 5);

        this.trainingNotTargetDivider
            .attr('x', leftAnchor)

        this.textNodes.train.isNotTarget.correct
            .attr('x', leftAnchor - 5);

        this.textNodes.train.isNotTarget.total
            .attr('x', leftAnchor + 5);

        // Test Set
        this.testGroup
            .attr('transform', 'translate(0, ' + this.baseline.test + ')');

        this.testLine
            .attr('width', this.width);

        this.testLabel
            .attr('x', this.width / 2);

        this.textNodes.test.accuracy
            .attr('x', this.width / 2);

        this.testTargetDivider
            .attr('x', rightAnchor)

        this.textNodes.test.isTarget.correct
            .attr('x', rightAnchor - 3);

        this.textNodes.test.isTarget.total
            .attr('x', rightAnchor + 3);

        this.testNotTargetDivider
            .attr('x', leftAnchor)

        this.textNodes.test.isNotTarget.correct
            .attr('x', leftAnchor - 3);

        this.textNodes.test.isNotTarget.total
            .attr('x', leftAnchor + 3);

        // Text Size
        if (this.width < 800) {
            this.largeTextSize = 18;
            this.smallTextSize = 16;
        } else {
            this.largeTextSize = 26;
            this.smallTextSize = 22;
        }

        _.each(this.largeTextNodes, function(t) {
            t.attr('font-size', this.largeTextSize);
        }, this);

        _.each(this.smallTextNodes, function(t) {
            t.attr('font-size', this.smallTextSize);
        }, this);

        this.labelVerticalOffset = - this.largeTextSize - 10;

        this.testLabel.attr('y', this.labelVerticalOffset);
        this.trainingLabel.attr('y', this.labelVerticalOffset);

        // Update Scroll Extent
        var scrollDuration = $window.height() / 3;
        var testScrollStart = this.scrollExtent.test[0];

        this.opacityInterpolator.domain([testScrollStart - scrollDuration, testScrollStart]);
        this.handleScroll(this.scroll);

        this.rr = true;
    },
